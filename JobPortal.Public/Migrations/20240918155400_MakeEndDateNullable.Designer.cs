// <auto-generated />
using System;
using JobPortal.Public.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPortal.Public.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240918155400_MakeEndDateNullable")]
    partial class MakeEndDateNullable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.33")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JobPortal.Public.Models.Entities.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicantId"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ApplicantId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("Applicants");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.EducationDetail", b =>
                {
                    b.Property<int>("EducationDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationDetailId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("Degree")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EducationDetailId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("EducationDetails");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.ExperienceDetail", b =>
                {
                    b.Property<int>("ExperienceDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExperienceDetailId"), 1L, 1);

                    b.Property<int>("ApplicantId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ExperienceDetailId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("ExperienceDetails");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.JobPosition", b =>
                {
                    b.Property<int>("JobPositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JobPositionId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("JobPositionId");

                    b.ToTable("JobPositions");

                    b.HasData(
                        new
                        {
                            JobPositionId = 1,
                            Description = "Develop and maintain software applications.",
                            PositionName = "Software Engineer"
                        },
                        new
                        {
                            JobPositionId = 2,
                            Description = "Analyze data and generate reports for business decisions.",
                            PositionName = "Data Analyst"
                        },
                        new
                        {
                            JobPositionId = 3,
                            Description = "Oversee the development and launch of products.",
                            PositionName = "Product Manager"
                        },
                        new
                        {
                            JobPositionId = 4,
                            Description = "Maintain and enhance CI/CD pipelines and cloud infrastructure.",
                            PositionName = "DevOps Engineer"
                        },
                        new
                        {
                            JobPositionId = 5,
                            Description = "Design user interfaces and improve user experience.",
                            PositionName = "UI/UX Designer"
                        });
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.Applicant", b =>
                {
                    b.HasOne("JobPortal.Public.Models.Entities.JobPosition", "JobPosition")
                        .WithMany("Applicants")
                        .HasForeignKey("JobPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobPosition");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.EducationDetail", b =>
                {
                    b.HasOne("JobPortal.Public.Models.Entities.Applicant", "Applicant")
                        .WithMany("EducationDetails")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.ExperienceDetail", b =>
                {
                    b.HasOne("JobPortal.Public.Models.Entities.Applicant", "Applicant")
                        .WithMany("ExperienceDetails")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.Applicant", b =>
                {
                    b.Navigation("EducationDetails");

                    b.Navigation("ExperienceDetails");
                });

            modelBuilder.Entity("JobPortal.Public.Models.Entities.JobPosition", b =>
                {
                    b.Navigation("Applicants");
                });
#pragma warning restore 612, 618
        }
    }
}
